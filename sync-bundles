#!/bin/bash


if [[ -f "${1}" ]]; then
	file=${1}
else
	file=~/bin/current-vim-bundles
fi
echo -e
echo "Saving bundles script to $file"
echo -e

get_bundles() {
	file=${1}
	echo "#!/bin/bash" > ${file}
	echo -e "\n" >> ${file}
	echo 'mkdir -p ~/.vim/bundle' >> ${file}
	echo 'cdold=$(pwd)' >> ${file}
	echo 'cd ~/.vim/bundle' >> ${file}
	bundle_dir=~/.vim/bundle
	for d in $( cd $bundle_dir && dir)
	do 
		dold=$(pwd)
		cd $bundle_dir/$d
		url=$(git remote -v |grep -i fetch | sed s/\(fetch\)//g |sed -e "s/^origin\s\+//g") 
		dname=$(echo $url | sed -e 's/.*\/\([a-zA-Z._-]\+\)$/\1/g')
		dname=$(echo $dname | sed -e 's/\.git$//g')
		echo $dname   $url
		echo -e "\n" >> ${file}
		echo '# ' "$d" >> ${file}
		echo "git clone $url" >> ${file}
		if [[ -f $bundle_dir/$d/.gitmodules ]]
		then
			echo "cd ~/.vim/bundle/$dname" >> ${file}
			echo "git submodule update --init --recursive" >> ${file}
			echo 'cd ~/.vim/bundle' >> ${file}
		fi
		if [[ $d == 'vim-pathogen' ]]
		then
			echo "mkdir -p ~/.vim/autoload" >> ${file}
			echo "ln -s ~/.vim/bundle/vim-pathogen/autoload/pathogen.vim ~/.vim/autoload/pathogen.vim" >> ${file}
		fi
		cd $dold
	done
			echo 'cd $cdold' >> ${file}
}
get_bundles "$file"
chmod +x "$file"

git_clone() {
	git clone ${1}
}
git_submodule_init() {
	dold=$(pwd)
	cd ${1}
	git submodule update --init --recursive
	cd ${dold}
}

