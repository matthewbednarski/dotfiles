#!/bin/bash

unset DO_HELP     DO_VERBOSE \
	  DO_DEBUG    DO_PROFILE     DO_BLOCK \
	  DO_RUN      DO_STOP  \
	  DO_STOP_OLD NO_STOP_OLD \
      HAS_PORT    HAS_DEBUG_PORT HAS_JMX_PORT \
      DO_INSTALL_SERVICE \
      DO_SYSV \
      DO_UNINSTALL_SERVICE 

if [[ "$1" == "" ]]; then
	DO_HELP=1
fi
while [[ $1 ]]; do
	case "$1" in
		--debug|debug)                      DO_DEBUG=1;;
		--debug-block|debug-block)          DO_DEBUG=1; DO_BLOCK=1;;
		-dp|--debug-port|debug-port)        if [[ "$2" != "" ]]; then HAS_DEBUG_PORT=1; DEBUG_PORT="$2"; DO_DEBUG=1;shift; fi;;
		-jp|--profile-port|profile-port)    if [[ "$2" != "" ]]; then HAS_JMX_PORT=1; JMX_PORT="$2"; DO_PROFILE=1; shift; fi;;
		--jmx-port|jmx-port)                if [[ "$2" != "" ]]; then HAS_JMX_PORT=1; JMX_PORT="$2"; DO_PROFILE=1;shift; fi;;
		--profile|profile)                  DO_PROFILE=1;;
		--jmx|jmx)                          DO_PROFILE=1;;
		--run|run)                          DO_RUN=1;;
		--start|start)                      DO_RUN=1;;
		--stop|stop)                      	DO_STOP=1;;
		--nostop|nostop)                    NO_STOP_OLD=1;;
		--multi|multi)                      NO_STOP_OLD=1;;
		--install|install)                  DO_INSTALL_SERVICE=1;;
		--uninstall|uninstall)              DO_UNINSTALL_SERVICE=1;;
		--sysv|sysv)                        DO_SYSV=1;;
		-p|--port|port)                     if [[ "$2" != "" ]]; then HAS_PORT=1; PORT="$2"; shift; fi;;
		-v|--verbose|verbose)               DO_VERBOSE=1;;
		-h|-\?|--help|help)                 DO_HELP=1;;
		*)                                  if [[ "$ARGS" == "" ]]; then ARGS="$1"; else ARGS="$ARGS $1"; fi;
	esac
	shift
done
SWITCH="\\e["
NORMAL="${SWITCH}0m"
YELLOW="${SWITCH}33m"
RED="${SWITCH}31m"
GREEN="${SWITCH}32m"
BLUE="${SWITCH}34m"
NRM="$NORMAL"
YLW="$YELLOW"
GRN="$GREEN"
BLU="$BLUE"

debug () {
	if (( DO_VERBOSE )); then
		echo -e $YLW$@$NRM
	fi
}

create-systemd-unit () {
	local luser="$1"
	local lproj="$2"
	local lsvc_file="$3"
	local java_bin="$4"
	if [[ "$java_bin" == "" ]]; then
		local java_bin="$JDK_HOME/jre/bin/java"
	fi
	local ljar=/var/$lproj/$lproj.jar
	
	echo -e '[Unit]' > "$lsvc_file"
	echo -e 'Description='$lproj' Spring Boot App Daemon' >> "$lsvc_file"
	echo -e 'After=syslog.target' >> "$lsvc_file"
	echo -e  >> "$lsvc_file"
	echo -e '[Service]' >> "$lsvc_file"
	echo -e 'Type=simple'  >> "$lsvc_file"
	echo -e 'ExecStart='$java_bin' -jar '$ljar   >> "$lsvc_file"
	echo -e >> "$lsvc_file"
	echo -e '[Install]' >> "$lsvc_file"
	echo -e 'WantedBy=multi-user.target' >> "$lsvc_file"
	return $?
}

usage (){
	echo -e "Usage: $(basename ${BASH_SOURCE[0]}) [OPTIONS] [ARGS]:"
	echo -e
	echo -e " Options:"
	echo -e "    --run, run                           run application"
	echo -e "    --start, start                       same as \"--run\""
	echo -e "    -p, --port, port                     set application port"
	echo -e "    --nostop, nostop                     a flag for run/start; wont kill "
	echo -e "                                           previous running instances"
	echo -e "                                           requires \"--port\""
	echo -e "    --multi, multi                       same as \"--nostop\""
	echo -e
	echo -e "    --stop, stop                         stop application"
	echo -e
	echo -e "    --debug, debug                       run with debugger options"
	echo -e "    --debug-block, debug-block           run with debugger and \"suspend=y\""
	echo -e "    -dp, --debug-port, debug-port        set debugger port"
	echo -e
	echo -e "    --jmx-port, jmx-port                 set jmx port"
	echo -e "    --profile-port, profile-port         same as \"--jmx-port\""
	echo -e "    -jp                                  same as \"--jmx-port\""
	echo -e "    --profile, profile                   run with jmx options"
	echo -e "    --jmx, jmx                           run with jmx options"
	echo -e
	echo -e "    --install, install                   install app as a service"
	echo -e "    --uninstall, uninstall               uninstall app service"
	echo -e "    --sysv, sysv                         install/uninstall app as SysV service"
	echo -e "                                             NB default is systemd service"
	echo -e
	echo -e "    -v, --verbose, verbose               print debug/verbose output"
	echo -e "    -h, -?, --help, help                 print usage"
}

if (( DO_HELP )); then
	usage
	exit 0
fi

dir=$(dirname "${BASH_SOURCE[0]}")
cdorig=$(pwd)
cd $dir
dir=$(pwd)
cd $cdorig
project=$(basename "${BASH_SOURCE[0]}")

if (( DO_INSTALL_SERVICE )); then
	if (( ! DO_SYSV )); then
		debug "Installing $project systemd service"
		if [[ -d "/var/$project" ]]; then
			debug "Deleting dir /var/$project"
			sudo rm -Rf "/var/$project"
		fi
		if [[ ! -d "/var/$project" ]]; then
			debug "Creating dir /var/$project"
			sudo mkdir -p "/var/$project"
		fi
		service_link=$(pkg-config systemd --variable=systemdsystemunitdir)/$project.service
		debug $service_link
		if [[ -h "$service_link" ]]; then
			debug "Deleting file $service_link"
			sudo /bin/rm -f "$service_link"
		fi
		sudo cp -f "$dir/$project.jar" "/var/$project/$project.jar"
		create-systemd-unit "$(echo $USER)" "$project" "$dir/$project.service"
		ret=$?
		if [[ "$ret" == "0" ]]; then
			is_enabled=$(sudo systemctl is-enabled $project.service) 
			is_enabled=$?
			if [[ "$is_enabled" == "0" ]]; then
				sudo systemctl disable $project.service
				sudo systemctl enable "$dir/$project.service"
			else
				sudo systemctl enable "$dir/$project.service"
			fi
		else
			debug "Systemd install script was not successfully created"
			exit 1
		fi
	else
		debug "Installing $project init.d service"
		if [[ ! -d $HOME/$project ]]; then
			debug "Creating dir $HOME/$project"
			mkdir -p $HOME/$project
		fi
		sudo ln -s $HOME/$project/$project-init /etc/init.d/$project
		sudo update-rc.d $project defaults
		sudo update-rc.d $project enable
	fi
	exit $?
fi
if (( DO_UNINSTALL_SERVICE )); then
	if (( ! DO_SYSV )); then
		debug "Uninstalling $project"
		sudo systemctl disable $project.service
	else
		debug "Uninstalling $project"
		sudo update-rc.d $project stop
		sudo update-rc.d $project disable
	fi
	exit $?
fi

if (( ! NO_STOP_OLD )); then
	OLD_PID=$(ps -ef | grep $project.jar | grep -v "grep" | awk '{ print $2 }')
	if [[ "$OLD_PID" != "" ]]; then
		DO_STOP_OLD=1
	fi
fi

if (( DO_DEBUG )); then
	DO_RUN=1
	debug "Debugging $project"
	if (( ! HAS_DEBUG_PORT )); then
		DEBUG_PORT=8787
	fi
	if (( DO_BLOCK )); then
		debug_opts=$(echo '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address='$DEBUG_PORT)
	else
		debug_opts=$(echo '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address='$DEBUG_PORT)
	fi
fi
if (( DO_PROFILE )); then
	DO_RUN=1
	if (( ! HAS_JMX_PORT )); then
		JMX_PORT=9091
	fi
	jmx_opts=$(echo '-Djavax.management.builder.initial= -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port='$JMX_PORT' -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false')
fi

java_opts=$(echo $jmx_opts $debug_opts)
echo $java_opts
if (( DO_RUN )); then
	if (( DO_STOP_OLD )); then
		if (( DO_VERBOSE )); then
			. "$dir/$project" stop -v
		else
			. "$dir/$project" stop 
		fi
	fi
	debug "Starting $project"
	if (( HAS_PORT )); then
		java $java_opts -jar "$dir/$project.jar" --server.port=$PORT "$ARGS"
	else
		java $java_opts -jar "$dir/$project.jar" "$ARGS"
	fi
elif (( DO_STOP )); then
	if (( DO_VERBOSE )); then
		old_procs=$(ps -ef | grep $project.jar | grep -v "grep")
		if [[ "$old_procs" != "" ]]; then
			debug "Stopping previous instance of $project"
			debug "Old process"
			echo -e $old_procs
		fi
	fi
	if [[ "$OLD_PID" != "" ]]; then
		debug "Killing PID $OLD_PID"
		kill -9 $OLD_PID
	fi
fi
